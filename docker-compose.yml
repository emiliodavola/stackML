services:
  minio:
    image: ${MINIO_IMAGE}
    container_name: minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data

  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml

  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - ./config/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - prometheus

  elasticsearch:
    image: ${ELASTIC_IMAGE}
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "${ELASTIC_PORT}:9200"
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data

  mlflow:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlflow:/app
      - ./data/mlflow:/mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - minio

  marimo:
    build:
      context: ./notebooks/marimo
      dockerfile: Dockerfile
    container_name: marimo
    ports:
      - "2718:2718"
    volumes:
      - ./notebooks/work:/app
    command: ["marimo", "edit", "/app", "--host", "0.0.0.0", "--port", "2718", "--no-token"]
    depends_on:
      - mlflow
    profiles: ["marimo"]

  jupyter:
    build:
      context: ./notebooks/jupyter
      dockerfile: Dockerfile
    container_name: jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks/work:/home/jovyan/work
    command: 'jupyter server --ip=0.0.0.0 --allow-root --ServerApp.token= --ServerApp.password= --ServerApp.allow_origin=* --ServerApp.disable_check_xsrf=True --no-browser'
    profiles: ["jupyter", "dev"]

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    profiles: ["on-demand"]

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME}_network
